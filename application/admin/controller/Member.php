<?php
/**
 * 平台会员管理
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018-07-03
 * Time: 10:17
 */

namespace app\admin\controller;


class Member extends BaseController
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 会员列表
     */
    public function index()
    {

        $start_time = strtotime(input('mintime'));
        $end_time = strtotime(input('maxtime'));
        $uname = input('uname');
        $param = input("get.");
        $where = [];
        if ($start_time && !$end_time) {
            $where['a.create_time'] = ['egt', $start_time];
        } else if (!$start_time && $end_time) {
            $where['a.create_time'] = ['elt', $end_time];
        } else if ($start_time && $end_time) {
            $where['a.create_time'] = [
                ['egt', $start_time],
                ['elt', $end_time]
            ];
        }
        if(isset($param["agent_name"]) && $param["agent_name"]){
            $where["b.name"] = [
                "like",
                "%".$param["agent_name"]."%"
            ];
        }
        if ($uname) {
            $where['a.telephone|a.user_name'] = $uname;
        }
        $userList = model('User')->alias('a')->join('Admins b', 'a.vip_code=b.vip_code', 'left')->where($where)->field('a.*, b.name sale_name')->order('a.create_time desc')->paginate(20,false,['query'=>$param]);
        $this->assign('list', $userList);
        $this->assign("param", $param);
        return $this->fetch();
    }

    /**
     * 分配
     */
    public function deliver()
    {
        if (request()->isAjax()) {
            $id = input('id');
            $vip_code = input('vip_code');
            $admin = model("Admins")->where("vip_code", $vip_code)->find();
            $res = model('User')->save(['vip_code' => $vip_code, "spread_money"=>$admin["person_money"]], ['id' => $id]);
            if ($res) {
                exit_json();
            } else {
                exit_json(-1, '操作失败');
            }
        }
        $list = model('Admins')->where('vip_code', 'neq', '')->column('name', 'vip_code');
        $this->assign('list', $list);
        return $this->fetch();

    }

    /**
     * 销售客户
     */
    public function saleList()
    {
        $start_time = strtotime(input('mintime'));
        $end_time = strtotime(input('maxtime'));
        $uname = input('uname');
        $where = ['b.id' => session(config('adminKey'))];
        if ($start_time && !$end_time) {
            $where['a.create_time'] = ['egt', $start_time];
        } else if (!$start_time && $end_time) {
            $where['a.create_time'] = ['elt', $end_time];
        } else if ($start_time && $end_time) {
            $where['a.create_time'] = [
                ['egt', $start_time],
                ['elt', $end_time]
            ];
        }
        if ($uname) {
            $where['a.telephone|a.user_name'] = $uname;
        }
        $userList = model('User')->alias('a')->join('Admins b', 'a.vip_code=b.vip_code', 'left')->where($where)->field('a.*, b.name sale_name')->order('a.create_time desc')->paginate(20,false,['query'=>$_GET]);
        $this->assign('list', $userList);
        return $this->fetch();

    }

    /**
     * 添加客户
     */
    public function addMember()
    {
        if (request()->isAjax()) {
            $telephone = input('telephone');
            $user = model('User')->where('telephone', $telephone)->find();
            if ($user) {
                exit_json(-1, '当前手机号已注册');
            } else {
                $res = model('User')->save(['user_name' => input('user_name'), 'telephone' => $telephone]);
                if ($res) {
                    exit_json();
                } else {
                    exit_json(-1, '添加失败');
                }
            }
        } else {
            return $this->fetch();
        }
    }

    /**
     * 用户详情
     */
    public function userDetail()
    {
        $id = input('id');
        $status = input("status");
        $param = input("get.");
        $this->assign("param", $param);
        switch ($status){
            case 1:
                $template = "userAddress";
                $user['address'] = model('UserAddress')->where('user_id', $id)->select();
                $this->assign('user', $user);
                break;
            case 2:
                $template = "userLogin";
                $model = model("UserLoginLog");
                if (isset($param['start_time']) && $param["start_time"] != "") {
                    $model->where("create_time", "gt", strtotime($param["start_time"]));
                }
                if (isset($param['end_time']) && $param["end_time"] != "") {
                    $model->where("create_time", "lt", strtotime($param["end_time"]) + 86400);
                }
                $list = $model->where("user_id", $id)->order("create_time desc")->paginate(20, false, ["query"=>$param]);
                $this->assign("list", $list);
                $this->assign("server", ["1" => "安卓", "2" => "苹果", "3" => "小程序", ""=>"未知"]);
                break;
            case 3:
                $template = "keysCollect";
                $model = model("KeysCollect");
                if (isset($param['start_time']) && $param["start_time"] != "") {
                    $model->where("create_time", "gt", strtotime($param["start_time"]));
                }
                if (isset($param['end_time']) && $param["end_time"] != "") {
                    $model->where("create_time", "lt", strtotime($param["end_time"]) + 86400);
                }
                $list = $model->where("user_id", $id)->order("create_time desc")->paginate(20, false, ["query"=>$param]);
                $this->assign("list", $list);
                break;
            case 4:
                $template = "productCollect";
                $model = model("CollectProduct");
                if (isset($param['start_time']) && $param["start_time"] != "") {
                    $model->where("create_time", "gt", strtotime($param["start_time"]));
                }
                if (isset($param['end_time']) && $param["end_time"] != "") {
                    $model->where("create_time", "lt", strtotime($param["end_time"]) + 86400);
                }
                $list = $model->where("user_id", $id)->order("create_time desc")->paginate(20, false, ["query"=>$param]);
                $this->assign("list", $list);
                break;
            case 5:
                $template = "orderCollect";
                $model = model("CollectOrder")->alias("a")->where("a.user_id", $id);

                if (isset($param['start_time']) && $param["start_time"] != "") {
                    $model->where("a.create_time", "gt", strtotime($param["start_time"]));
                }
                if (isset($param['end_time']) && $param["end_time"] != "") {
                    $model->where("a.create_time", "lt", strtotime($param["end_time"]) + 86400);
                }
                $list = $model->join("Order c", "a.order_no=c.order_no")->field("a.*, c.id order_id")->order("a.create_time desc")->paginate(20, false, ["query"=>$param]);
                $this->assign("list", $list);
                break;
            case 6:
                $template = "followList";
                $model = model("FollowOrder")->alias("a")->where("a.user_id", $id);
                if (isset($param['start_time']) && $param["start_time"] != "") {
                    $model->where("a.create_time", "gt", strtotime($param["start_time"]));
                }
                if (isset($param['end_time']) && $param["end_time"] != "") {
                    $model->where("a.create_time", "lt", strtotime($param["end_time"]) + 86400);
                }
                $list = $model->join("follow_cate b", "a.cate_id=b.id", "left")->field("a.*, b.name cate_name")->order("a.create_time desc")->paginate(20, false, ["query"=>$param]);
                $this->assign("user_id", $id);
                $this->assign("list", $list);
                break;
        }
        return $this->fetch($template);
    }

    /**
     * 添加跟单记录
     */
    public function addFollow()
    {
        $user_id = input("user_id");
        if(request()->isAjax()){
            $res = model("FollowOrder")->save([
                "admin_id"=>session("admin_id"),
                "user_id"=>$user_id,
                "cate_id"=>input("cate_id"),
                "content"=>input("content")
            ]);
            if($res){
                exit_json();
            }else{
                exit_json(-1, "添加失败");
            }
        }
        $this->assign("user_id", $user_id);
        $cate = model("FollowCate")->column("name", "id");
        $this->assign("cate", $cate);
        return $this->fetch("addFollow");
    }
    /**
     * 编辑跟单记录
     */
    public function editFollow()
    {
        $id = input("id");
        $fo = model("FollowOrder")->where("id", $id)->find();
        if(request()->isAjax()){
            $res = $fo->save([
                "cate_id"=>input("cate_id"),
                "content"=>input("content")
            ]);
            if($res){
                exit_json();
            }else{
                exit_json(-1, "编辑失败");
            }
        }
        if(!$fo){
            die("记录不存在");
        }
        $this->assign("item", $fo);
        $cate = model("FollowCate")->column("name", "id");
        $this->assign("cate", $cate);
        return $this->fetch("editFollow");
    }

    public function delFollow()
    {
        $id = input("id");
        $fo = model("FollowOrder")->where("id", $id)->find();
        if($fo){
            if($fo->delete()){
                exit_json();
            }else{
                exit_json(-1, "删除失败");
            }
        }else{
            exit_json(-1, "记录不存在,刷新后重试");

        }
        
    }

}