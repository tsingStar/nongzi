<?php
/**
 * 商品
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.2
 * Time: 16:20
 */

namespace app\common\model;


use think\Model;

class Goods extends Model
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    protected $autoWriteTimestamp = true;
    protected $createTime = false;

    /**
     * 格式化商品列表信息
     * @param $good_arr
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function goodsFormat($good_arr)
    {
        $goodList = [];
        foreach ($good_arr as $good) {
//            $temp = [];
//            $temp['id'] = $good['id'];
//            $temp['name'] = $good['name'];
//            $temp['sale_price'] = $good['sale_price'];
//            $temp['active_price'] = $good['active_price'];
////            $img_arr = explode(',', $good['img']);
//            $temp['img'] = $good['img'];
            $goodList[] = $this->formatOne($good);
        }
        return $goodList;
    }

    /**
     * 格式化单个商品
     * @param $good_arr
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function formatOne($good_arr)
    {
        $good = [];
        $good['good_id'] = $good_arr['id'];
        if (!$good_arr['goodattr']) {
            $good['name'] = $good_arr['name'] . '/' . $good_arr['goodattr'];
        } else {
            $good['name'] = $good_arr['name'];
        }
        $good['sale_price'] = $good_arr['sale_price'];
        $good['active_price'] = $good_arr['active_price'];
        $good['img'] = $good_arr['img'];
        $good['instro'] = $good_arr['instro'];
        //处理默认规格显示
        $good['guige'] = '规格';
        if ($good_arr['have_det'] == 1) {
            $props = $this->getGoodsProp($good_arr['id']);
            if (count($props)) {
                $good['sale_price'] = $props[0]['prop_price'];
                $good['active_price'] = $props[0]['prop_active_price'];
                $good['guige'] = '规格';
            }
        } else {
            $props = [
                [
//                    prop_id, prop_name, prop_active_price, prop_price, num
                    'prop_id' => 0,
                    'prop_name' => $good_arr['guige']?$good_arr['guige']:$good_arr['goodattr'],
                    'prop_active_price' => $good_arr['active_price'],
                    'prop_price' => $good_arr['sale_price'],
                    'num' => $good_arr['count']
                ]
            ];
        }

        $good['prop'] = $props;
//        $good['have_det'] = $good_arr['have_det'];
        $good['have_det'] = 1;
        $good['count'] = $good_arr['count'];
        $good['shop_id'] = $good_arr['shop_id'];
        return $good;
    }


    /**
     * 获取商品列表
     * @param $shop_id
     * @param array $extra
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getGoodsList($shop_id, $extra = [], $page = 0, $page_num = 0, $is_m = 0)
    {
        $where = ['count'=>['gt', 0]];
        $where['shop_id'] = ['eq', $shop_id];
        $where = array_merge($where, $extra);
        if ($page == 0) {
            $page = 1;
        }
        if ($page_num == 0) {
            $page_num = 10;
        }
        $offset = ($page - 1) * $page_num;
        $goodsList = $this->where($where)->limit($offset, $page_num)->select();
        return $this->goodsFormat($goodsList);
    }

    /**
     * 获取商品规格
     * @param $good_id
     * @return false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getGoodsProp($good_id)
    {
        $prop = db('goods_prop')->field('id prop_id, prop_name, prop_active_price, prop_price, num')->where(['good_id'=>$good_id, 'num'=>['gt', 0]])->select();
        return $prop;
    }

    /**
     *
     * 相关商品推荐
     * @param $good_id
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getRelationGoods($good_id)
    {
        $good = $this->where('id', $good_id)->find();
        $relationGoods = $this->where('cate_id', $good['cate_id'])->order('sellcount desc')->limit(6)->select();
        return $this->goodsFormat($relationGoods);
    }

    /**
     * 获取商品库存总量
     */
    public function getCount($good_id, $prop_id = 0)
    {
        if ($prop_id) {
            //如若存在规格，则去规格详情中获取当前规格剩余库存
            $prop = new GoodsProp();
            return $prop->getCount($good_id, $prop_id);
        } else {
            $g = $this->where('id', $good_id)->find();
            return $g['count'];
        }

    }

}


