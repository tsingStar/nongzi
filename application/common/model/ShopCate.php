<?php
/**
 * 店铺分类基础类
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.2
 * Time: 10:23
 */

namespace app\common\model;


use think\Log;
use think\Model;

class ShopCate extends Model
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 根据店铺id获取分类信息
     * @param $shop_id
     * @param int $parent_id
     * @param int $is_recommend
     * @return array|false|\PDOStatement|string|\think\Collection
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getCate($shop_id, $parent_id = -1, $is_recommend = 0)
    {
        $where = ['shop_id' => ['eq', $shop_id]];
        if ($parent_id != -1) {
            $where['parent_id'] = $parent_id;
        }
        if ($is_recommend) {
            $where['is_recommend'] = $is_recommend;
        }
        $cateArr = $this->where($where)->order('ord_id desc')->select();
        if (!is_array($cateArr)) {
            $cateArr = [];
        }
        return $cateArr;
    }

    /**
     * 设置首页推荐分类
     */
    function setRecommend($cate_id, $recommend)
    {
        return $this->save(['is_recommend' => $recommend], ['id' => $cate_id]);
    }

    /**
     * 删除指定分类及分类下所有子分类
     */
    function delCate($ids)
    {
        $cid = explode(',', $ids);
        $ids = $this->where('parent_id', 'in', $cid)->column('id');
        $ids = array_merge($cid, $ids);
        \model('goods')->where('cate_id', 'in', $ids)->delete();
        return $this->where('id', 'in', $ids)->delete();
    }

    /**
     * 保存店铺父级分类
     * @param $item
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @return int $parent_id
     */
    function saveCate($item)
    {
        $res = $this->where([
            'library_id' => $item['id'],
            'shop_id' => SHOP_ID
        ])->find();
        if ($res) {
            $this->isUpdate(true)->save([
                'name' => $item['name'],
                'orignal_parent_id' => $item['parentid'],
                'orignal_id' => $item['asyncid'],
                'parent_id' => 0,
                'shop_id' => SHOP_ID,
                'img' => $item['image'],
                'library_id' => $item['id'],
                'banner'=>$item['banner']
            ], ['id' => $res['id']]);
            return $res['id'];
        } else {
            $this->isUpdate(false)->save([
                'name' => $item['name'],
                'orignal_parent_id' => $item['parentid'],
                'orignal_id' => $item['asyncid'],
                'parent_id' => 0,
                'shop_id' => SHOP_ID,
                'img' => $item['image'],
                'library_id' => $item['id'],
                'banner'=>$item['banner']
            ]);
            $parent_id = $this->getLastInsID();
            return $parent_id;
        }
    }

    /**
     * 保存商品分类子类
     * @param $item
     * @param $parent_id
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    function saveChildCate($item, $parent_id)
    {
        $res = $this->where([
            'library_id' => $item['id'],
            'shop_id' => SHOP_ID
        ])->find();
        if ($res) {
            $this->isUpdate(true)->save([
                'name' => $item['name'],
                'orignal_parent_id' => $item['parentid'],
                'orignal_id' => $item['asyncid'],
                'parent_id' => $parent_id,
                'shop_id' => SHOP_ID,
                'img' => $item['image'],
                'library_id' => $item['id']
            ], ['id' => $res['id']]);
        } else {
            $this->isUpdate(false)->save([
                'name' => $item['name'],
                'orignal_parent_id' => $item['parentid'],
                'orignal_id' => $item['asyncid'],
                'parent_id' => $parent_id,
                'shop_id' => SHOP_ID,
                'img' => $item['image'],
                'library_id' => $item['id']
            ]);

        }
    }

}