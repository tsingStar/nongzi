<?php
/**
 * 购物车信息
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.22
 * Time: 11:12
 */

namespace app\app\controller;


use app\common\model\Goods;
use think\Log;

class ShopCart extends BaseUser
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 添加购物车
     */
    public function addCart()
    {
        $product_id = input('product_id');
        $prop_attr = input('prop_attr');
        $num = input('num');
        if ($num < 0) {
            exit_json(-1, '参数错误');
        }

        $p_attr = model('ProductAttr')->where([
            'product_id' => $product_id,
            'prop_value_attr' => $prop_attr
        ])->find();
        $product = model('Product')->where('id', $product_id)->find();
        if(!$p_attr){
            exit_json(-1,'当前属性商品不存在');
        }
        if ($p_attr['remain'] < $num) {
            exit_json(-1, '商品库存不足');
        } else {
            //限购待处理
            $res = model('Order')->checkBuyNum($product['id'], $num);
            if ($res['code'] == -1) {
                exit_json(-1, $res['msg']);
            }
            $cart = model('ShopCart')->where([
                'product_id' => $product_id,
                'prop_value_attr' => $prop_attr,
                'user_id' => USER_ID
            ])->find();
            if ($cart) {
                $res = $cart->save(['num' => $num]);
            } else {
                $res = model('ShopCart')->save([
                    'product_id' => $product_id,
                    'prop_value_attr' => $prop_attr,
                    'num' => $num,
                    'user_id' => USER_ID
                ]);
            }
            if ($res) {
                exit_json(1, '加入购物车成功');
            } else {
                exit_json(-1, '加入购物车失败');
            }
        }
    }

    /**
     * 删除购物车商品
     */
    public function delCart()
    {
        $cart_id = input('cart_id');
        $cart = model('ShopCart')->where('id', $cart_id)->where('user_id', USER_ID)->find();
        if ($cart) {
            if ($cart->delete()) {
                exit_json(1, '删除成功');
            } else {
                exit_json(-1, '删除失败');
            }
        } else {
            exit_json(-1, '购物车信息不存在');
        }

    }

    /**
     * 获取购物车列表
     */
    public function cartList()
    {
        $cartList = model('ShopCart')->where(['user_id' => USER_ID])->select();
        $data = [];
        foreach ($cartList as $good) {
            $temp = [];
            $product = model('Product')->where('id', $good['product_id'])->find();
            $prop = model('ProductAttr')->where('prop_value_attr', $good['prop_value_attr'])->where('product_id', $good['product_id'])->find();
            $temp['cart_id'] = $good['id'];
            $temp['product_id'] = $good['product_id'];
            $temp['prop_value_attr'] = $good['prop_value_attr'];
            $temp['thumb_img'] = __URL__ . ($prop['img_url'] ? $prop['img_url'] : $product['thumb_img']);
            $temp['name'] = $product['name'];
            $temp['prop_name'] = $prop['prop_value_name'];
            $temp['num'] = $good['num'];
            $temp['price'] = $prop['price_comb'];
            $temp['total_money'] = sprintf('%.2f', $prop['price_comb'] * $good['num']);
            $data[] = $temp;
        }
        exit_json(1, '请求成功', $data);
    }

    /**
     * 更改购物车商品数量
     */
    public function changeCartNum()
    {
        $cart_id = input('cart_id');
        $num = input('num');
        $cart = model('ShopCart')->where('id', $cart_id)->where('user_id', USER_ID)->find();
        if ($cart) {
            $product = model('Product')->where('id', $cart['product_id'])->find();
            //限购数量校验
            $res = model('Order')->checkBuyNum($product['id'], $num);
            if ($res['code'] == -1) {
                exit_json(-1, $res['msg']);
            }
            $prop = model('ProductAttr')->where('prop_value_attr', $cart['prop_value_attr'])->where('product_id', $cart['product_id'])->find();
            if ($num > $prop['remain']) {
                exit_json(-1, '库存不足, 当前库存剩余' . $prop['remain']);
            } else {
                $cart->save(['num' => $num]);
                $temp = [];
                $temp['cart_id'] = $cart['id'];
                $temp['product_id'] = $cart['product_id'];
                $temp['prop_value_attr'] = $cart['prop_value_attr'];
                $temp['thumb_img'] = __URL__ . ($prop['img_url'] ? $prop['img_url'] : $product['thumb_img']);
                $temp['name'] = $product['name'];
                $temp['prop_name'] = $prop['prop_value_name'];
                $temp['num'] = $cart['num'];
                $temp['price'] = $prop['price_comb'];
                $temp['total_money'] = sprintf('%.2f', $prop['price_comb'] * $cart['num']);
                exit_json(1, '操作成功', $temp);
            }
        } else {
            exit_json(-1, '购物车商品不存在');
        }


    }


}