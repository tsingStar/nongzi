<?php
/**
 * 订单控制器
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.29
 * Time: 14:59
 */

namespace app\app\controller;


use app\common\model\Pay;
use think\Cache;

class Order extends BaseUser
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 生成预支付订单 购物车来源
     */
    public function makePreOrderByCart()
    {
        $cart_ids = input('cart_ids');
        $carts = model('ShopCart')->whereIn('id', $cart_ids)->select();
        $send_fee = 0;
        $count = 0;
        $total_money = 0;
        $pros = [];
        foreach ($carts as $c) {
            $p = model('Product')->where('id', $c['product_id'])->find();
            $prop_attr = model('ProductAttr')->where('prop_value_attr', $c['prop_value_attr'])->where('product_id', $c['product_id'])->find();
            $total_price = sprintf("%.2f", $prop_attr['price_comb'] * $c['num']);
            $temp = [
                'name' => $p['name'],
                'thumb_img' => $p['thumb_img'],
                'price_comb' => $prop_attr['price_comb'],
                'prop_name' => $prop_attr['prop_value_name'],
                'num' => $c['num'],
                'total_price' => $total_price
            ];
            if ($p['is_send'] != 1) {
                $send_fee += $c['num'] * $p['send_fee'];
            }
            $count += $c['num'];
            $total_money += $total_price;
            $pros[] = $temp;
        }
        $data = [
            'products' => $pros,
            'send_fee' => $send_fee,
            'total_money' => $total_money,
            'cart_ids' => $cart_ids,
            'src' => 1
        ];
        $prepay_id = uniqid(USER_ID);
//        cache($prepay_id, $data);
        Cache::clear(USER_ID);
        Cache::tag(USER_ID)->set($prepay_id, $data);
        $data['prepay_id'] = $prepay_id;
        exit_json(1, '请求成功', $data);

    }

    /**
     *     生成预支付订单 商品立即购买
     */
    public function makePreOrderByPro()
    {
        $product_id = input('product_id');
        $prop_value = input('prop_attr_value');


        $prepay_id = uniqid(USER_ID);
        session($prepay_id, $data);
        exit_json(1, '请求成功', $data);


    }

    /**
     * 生成订单
     */
    public function makeOrder()
    {

        $prepay_id = input('prepay_id');
        $data = Cache::tag(USER_ID)->get($prepay_id);
//        Cache::clear(USER_ID);
        exit_json(1, '下单成功', $data);

    }


    /**
     * 获取订单基础信息
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getOrderInfo()
    {
        $type = input('type');
        $shop_id = input('shop_id');
        $good_list = [];
        $shop_cost = 0;
        if ($type == 1) {
            // 立即购买
            $good_id = input('good_id');
            $prop_id = input('prop_id') ? input('prop_id') : 0;
            $num = input('num');
            if (!$good_id) {
                exit_json(-1, '商品参数错误');
            }
            if ($num <= 0) {
                exit_json(-1, '商品数量错误');
            }
            $res = $this->getGoodList($good_id, $num, $prop_id);
            if ($res['code'] == -1) {
                exit_json(-1, $res['msg']);
            }
            $temp = $res['data'];
            $shop_cost += $temp['total_price'];
            $good_list[] = $temp;
        } else if ($type == 2) {
            //购物车购买
            $good_cart = model('Shopcart')->where(['shop_id' => $shop_id, 'user_id' => USER_ID])->select();
            foreach ($good_cart as $good) {
                $res = $this->getGoodList($good['good_id'], $good['num'], $good['prop_id']);
                if ($res['code'] == -1) {
                    exit_json(-1, $res['msg']);
                }
                $temp = $res['data'];
                $shop_cost += $temp['total_price'];
                $good_list[] = $temp;
            }
        } else {
            exit_json(-1, '参数错误');
        }


        $default_address = model('user_address')->where(['user_id' => USER_ID, 'is_default' => 1, 'shop_id' => $shop_id])->find();
        if (!$default_address) {
            $default_address = new \stdClass();
        }
        $coupon_list = model('userCoupon')->field('id coupon_id, name, cost, start_time, end_time, min_cost, status')->where(['status' => 0, 'start_time' => ['lt', date('Y-m-d H:i:s')], 'end_time' => ['gt', date('Y-m-d H:i:s')], 'min_cost' => ['lt', $shop_cost], 'userid' => USER_ID])->select();
        $shop_name = model('shop')->where('id', $shop_id)->value('shopname');
        $data = [
            'good_list' => $good_list,
            'shop_cost' => $shop_cost,
            'default_address' => $default_address,
            'coupon_list' => $coupon_list,
            'shop_name' => $shop_name
        ];
        exit_json(1, '请求成功', $data);
    }

    /**
     * 生成订单前订单详情列表
     * @param $good_id
     * @param $num
     * @param int $prop_id
     * @return array
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    private function getGoodList($good_id, $num, $prop_id = 0)
    {
        $data = [
            'code' => 1,
            'msg' => '',
            'data' => []
        ];
        $good = model('goods')->where(['id' => $good_id, 'is_live' => 1])->find();
        if (!$good) {
            $data['code'] = -1;
            $data['msg'] = '商品不存在或已下架';
        }
        $temp['good_image'] = explode(',', $good['img'])[0];
        $temp['good_name'] = $good['name'];
        $temp['num'] = $num;
        $temp['sale_price'] = $good['sale_price'];
        $temp['active_price'] = $good['active_price'];
        $temp['good_id'] = $good_id;
        $temp['gno'] = $good['gno'];
        $temp['prop_id'] = $prop_id;
        $temp['prop_name'] = $good['guige'] ?: $good['goodattr'];
        if ($prop_id == 0) {
            if ($good['count'] < $num) {
                $data['code'] = -1;
                $data['msg'] = '商品库存不足';
            }
        } else {
            $p = model('goods_prop')->where(['id' => $prop_id, 'good_id' => $good_id])->find();
            $temp['sale_price'] = $p['prop_price'];
            $temp['active_price'] = $p['prop_active_price'];
            $temp['prop_name'] = $p['prop_name'];
            if ($p['num'] < $num) {
                $data['code'] = -1;
                $data['msg'] = '商品库存不足';
            }
        }
        $temp['total_price'] = sprintf('%.2f', $temp['num'] * $temp['active_price']);
        $data['data'] = $temp;
        return $data;
    }

    /**
     * 获取订单列表
     */
    public function getOrderList()
    {
        $order = model("order");
        $time = time() - 30 * 60;
        $order->save(['order_status' => 3], ['user_id' => USER_ID, 'create_time' => ['lt', $time], 'pay_status' => 0]);
        $order_status = input('order_status');
        $where = ['user_id' => USER_ID, 'is_del' => 0];
        if (isset($order_status) && trim($order_status) != '') {
            $where['order_status'] = $order_status;
        }
        $page = input('page') ? input('page') : 1;
        $pageNum = input('pageNum') ? input('pageNum') : 10;
        $offset = ($page - 1) * $pageNum;
        $order_list = $order->where($where)->limit($offset, $pageNum)->order('create_time desc')->select();
        $list = $order->formatList($order_list);
        exit_json(1, '请求成功', $list);
    }

    /**
     * 订单支付
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function payOrder()
    {
        $order_no = input('order_no');
        $pay_type = input('pay_type');
        $orderInfo = model('order')->where('order_no', $order_no)->find();
        if ($orderInfo['user_id'] != USER_ID) {
            exit_json(-1, '不是当前登陆用户订单');
        }
        if ($orderInfo['order_status'] != 0) {
            exit_json(-1, '订单状态不支持支付');
        }
        if ($orderInfo->getData('create_time') < time() - 30 * 60) {
            $orderInfo->save(['order_status' => 4]);
            exit_json(-1, '订单超时');
        }
        $payModel = new Pay();
        $orderString = $payModel->payOrder($order_no, $pay_type, 'order');
        if ($orderString === false) {
            exit_json(-1, '支付参数错误');
        }
        if ($pay_type == 1) {
            exit_json(1, '请求成功', ['weixinOrderString' => new \stdClass(), 'aliOrderString' => $orderString]);
        } else {
            exit_json(1, '请求成功', ['weixinOrderString' => $orderString, 'aliOrderString' => ""]);
        }
    }

    /**
     * 取消订单
     */
    public function cancelOrder()
    {
        $order_no = input('order_no');
        $order = model('order')->where(['order_no' => $order_no])->find();
        if ($order['user_id'] != USER_ID) {
            exit_json(-1, '不是当前登陆用户订单');
        }
        if ($order['order_status'] != 0) {
            exit_json(-1, '已支付订单不可以取消');
        } else {
            model('order')->where('order_no', $order_no)->delete();
            model('orderDet')->where('order_no', $order_no)->delete();
            exit_json();
        }
    }

    /**
     * 确认收获
     */
    public function sureOrder()
    {
        $order_no = input('order_no');
        $orderModel = model('order');
        $order = $orderModel->where('order_no', $order_no)->find();
        if ($order['order_status'] == 1) {
            if ($order['user_id'] != USER_ID) {
                exit_json(-1, '不是当前登陆用户订单');
            }
            $order->save(['order_status' => 2, 'sure_time' => date('Y-m-d H:i')]);
            exit_json();
        } else {
            exit_json(-1, '订单状态错误');
        }
    }

    /**
     * 获取申请退款状态
     */
    public function getRefundStatus()
    {
        $order_no = input('order_no');
        $order = model('order')->where('order_no', $order_no)->find();
        if ($order) {
            if ($order['is_refund'] == 1 && $order['order_status'] == 1) {
                exit_json(1, '请求成功', ['refund_status' => 1]);
            } else {
                exit_json(1, '请求成功', ['refund_status' => -1]);
            }
        } else {
            exit_json(-1, '订单不存在');
        }
    }

    /**
     * 申请退款
     */
    public function refundOrder()
    {
        $order_no = input('order_no');
        $remarks = input('remarks');
        $order = model('order')->where('order_no', $order_no)->find();
        if ($order) {
            if ($order['order_status'] != 1 || $order['is_send'] == 1) {
                exit_json(-1, '当前订单不支持线上退款');
            }
            if ($order['is_apply_refund'] == 1) {
                exit_json(-1, '申请已提交，等待商家审核');
            }
            if ($order['is_apply_refund'] != 0) {
                exit_json(-1, '退款申请已处理，请联系客服');
            }
            $order->save(['order_status' => 2, 'is_apply_refund' => 1]);
            model('order_refund')->save([
                'order_id' => $order['id'],
                'order_no' => $order['order_no'],
                'refund_money' => $order['real_cost'],
                'remarks' => $remarks
            ]);
            exit_json(1, '申请已提交，等待商家审核');
        } else {
            exit_json(-1, '订单不存在');
        }
    }

    /**
     * 获取退款详情
     */
    public function getRefund()
    {
        $order_no = input('order_no');
        $refund = model('order_refund')->where('order_no', $order_no)->find();
        if ($refund) {
            exit_json(1, '请求成功', $refund);
        } else {
            exit_json(-1, '订单不存在');
        }

    }

    /**
     * 删除订单
     */
    public function delOrder()
    {
        $order_no = input('order_no');
        $order = model('order')->where('order_no', $order_no)->find();
        if ($order['user_id'] > 3) {
            $order->save(['is_del' => 1]);
            exit_json();
        } else {
            exit_json(-1, '当前订单状态不允许删除');
        }
    }


}